rule Workflow2Class 
	transform w : Workflow {
	
	guard: w.appliesTo()
	
	parameters : Map{"w" = w,"package" = w.getPackage()}
	
	template : "workflow2class.egl"
	
	target : w.getPath() + w.name + ".py"
}

rule Type2Class 
	transform t : Type {
	
	guard : t.appliesTo() and t.impl.isUndefined() //and s.csvFile.isUndefined()
	
	template : "type2class.egl"
	
	target : t.getPath() + t.name + ".py"
}

rule CsvSource2Source
	transform t : CsvSource {

	guard: t.appliesTo()

	parameters : Map{"w" = t.eContainer()}

	template : "csvsource2source.egl"
	
	target : t.getImplPath() + t.name + ".py"	
	
	overwrite : false
}

rule CsvSink2Sink
	transform t : CsvSink {

	guard: t.appliesTo()

	parameters : Map{"w" = t.eContainer()}

	template : "csvsink2sink.egl"
	
	target : t.getImplPath() + t.name + ".py"	
	
	overwrite : false
}

@greedy
rule Task2BaseClass 
	transform t : Task {

	guard : t.appliesTo()
	
	parameters : Map{"w" = t.eContainer()}
	
	template : "task2baseclass.egl"
	
	target : t.getPath() + t.name + "Base.py"	
}

@greedy
rule Task2ImplClass 
	transform t : Task {
		
	guard : t.appliesTo()
		
	parameters : Map {
		"w" = t.getWorkflow(),
		"package" = t.getPackage()
	}
	
	template : "task2implclass.egl"
	
	target : t.getImplPath() + t.name + ".py"
	
	overwrite : false
}

@greedy
rule Steam2Class 
	transform s : Stream {
	
	guard: s.appliesTo()
	
	parameters : Map{"w" = s.eContainer()}
	
	template : "stream2class.egl"
	
	target : s.getPath() + s.name + ".py"
}

@greedy
rule Steam2Consumer 
	transform s : Stream {
	
	guard: s.appliesTo()
	
	parameters : Map{"t" = Task}
	
	template : "stream2consumer.egl"
	
	target : s.getPath() + s.name + "Consumer.py"
}

rule GenerateRequirementsTxt
	transform w : Workflow {
	
	guard: w.appliesTo()
	
	template: "generateRequirementsTxt.egl"
	
	target: w.getOutputFolder() + "/requirements.txt"
}

rule GenerateMain
	transform w : Workflow {
	
	guard: w.appliesTo()
	
	parameters : Map{"w" = w,"package" = w.getPackage()}
	
	template: "generateMain.egl"
	
	target: w.getOutputFolder() + "/main.py"	
}

rule GenerateRuntime
	transform w : Workflow {
	
	guard: w.appliesTo()
	
	template: "generateRuntime.egl"
	
	target: w.getGenOutputFolder() + "/org.eclipse.scava.crossflow".toPath() + "/runtime.py"
}

rule GenerateBXStream
	transform w : Workflow {
	
	guard: w.appliesTo()
	
	template: "generateBXStream.egl"
	
	target: w.getGenOutputFolder() + "/org.eclipse.scava.crossflow.utils".toPath() + "/basic_xstream.py"
}

@cached
operation Any getGenOutputFolder() : String {
	if (self.getPython().isDefined() and self.getPython().genOutputFolder.isDefined()) {
		return self.getPython().genOutputFolder;
	}
	return "py-gen";
}

@cached
operation Any getOutputFolder() : String {
	if (self.getPython().isDefined() and self.getPython().outputFolder.isDefined()) {
		return self.getPython().outputFolder;
	}
	return "py";
}

@cached
operation Any getPath() : String {
	return self.getGenOutputFolder() + "/" + self.getPackage().toPath();
}

@cached
operation Any getImplPath() : String {
	return self.getOutputFolder() + "/" + self.getPackage().toPath();
}

/**
 * Get a path for placing supporting files such as setup.py and requirements.py
 */
@cached
operation Any getSupportPath() {
}

@cached
operation Any getWorkflow() : Workflow {
	if (self.isTypeOf(Workflow)) return self;
	return self.eContainer().getWorkflow();
}

operation String toPath() : String {
	return self.replaceAll("\\.", "/") + "/";
}

operation Any appliesTo() : Boolean {
<<<<<<< HEAD:crossflow/org.eclipse.scava.crossflow/src/org/eclipse/scava/crossflow/python/crossflow.egx
	if (self.isKindOf(Task)) {
		return self.languages.exists(l | l.isPython());
	}
	return not self.getWorkflow().languages.exists(l | l.isPython());
=======
	if (self.getPython().isDefined()) {
		if (self.isKindOf(Task)) {
			return self.language.isDefined() and self.language.isPython();
		}
		return true;
	}
	return false;
>>>>>>> crossflow:crossflow/org.eclipse.scava.crossflow/src/org/eclipse/scava/crossflow/python/crossflow-python.egx
}

@cached
operation Any getPackage() : String {
	var python = self.getPython();
	if (not python.isDefined() or not python.package.isDefined()) {
		return self.getWorkflow().name.ftlc;
	}
	return python.package;
}

operation Language isPython() : Boolean {
	return self.name.toLowerCase=="python";
}

@cached
operation Any getPython() : Language {
	var langs = self.getWorkflow().languages.select(l|l.isPython());
	if (langs.isEmpty()) {
		return null;
	}
	return langs.first;
}