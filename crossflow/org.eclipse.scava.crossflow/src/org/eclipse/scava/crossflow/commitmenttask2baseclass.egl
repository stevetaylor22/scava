[%import "task2baseclass.egl";%]
package [%=package%];

import java.util.HashSet;
import java.util.Set;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import org.eclipse.scava.crossflow.runtime.FailedJob;

public abstract class Commitment[%=t.name%]Base extends [%=t.name%]Base {
	
	protected volatile int rejections = 0;
	protected volatile int occurences = 0;
	protected Map<String,Integer> seen = new ConcurrentHashMap<>();
	protected Set<String> commitments = ConcurrentHashMap.newKeySet();	
	
	[%for (s in t.input) { %]
[%=s.createStartOfConsumeMethod()%]
		[%if(not t.multipleOutputs and t.output.size==1) {%]
				[%=t.output.first.type.name%] result = null;
				if (commitments.contains([%=s.type.name.ftlc()%].getName())) {
					occurences++;
					result = consume[%=s.name%]([%=s.type.name.ftlc()%]);
				} else if (seen.containsKey([%=s.type.name.ftlc()%].getId()) && seen.get([%=s.type.name.ftlc()%].getId())>[%=t.commitAfter%]) {
					commitments.add([%=s.type.name.ftlc()%].getName());
					result = consume[%=s.name%]([%=s.type.name.ftlc()%]);
				} else {
					if(!seen.containsKey([%=s.type.name.ftlc()%].getId()))
						seen.put([%=s.type.name.ftlc()%].getId(),1);
					seen.put([%=s.type.name.ftlc()%].getId(),seen.get([%=s.type.name.ftlc()%].getId())+1);
					rejections++;
					sendToAnimals([%=s.type.name.ftlc()%]);
				}			
				if(result != null){
					result.setTransactional(false);
					sendTo[%=t.output.first.name%](result);
				}
		[%}else {%]
				if (commitments.contains([%=s.type.name.ftlc()%].getName())) {
					occurences++;
					consume[%=s.name%]([%=s.type.name.ftlc()%]);
				} else if (seen.contains([%=s.type.name.ftlc()%].getId())) {
					commitments.add([%=s.type.name.ftlc()%].getName());
					consume[%=s.name%]([%=s.type.name.ftlc()%]);
				} else {
					seen.add([%=s.type.name.ftlc()%].getId());
					rejections++;
					sendToAnimals([%=s.type.name.ftlc()%]);
				}			
[%=s.sendConfirmationMessage()%]
		[%}%]
[%=s.createEndOfConsumeMethod()%]
	[%}%]

	public int getRejections() {
		return rejections;
	}

	public int getOccurences() {
		return occurences;
	}
	
	public int getCommitmentSize() {
		return commitments.size();
	}

}